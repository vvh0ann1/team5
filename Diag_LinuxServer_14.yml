# cron 파일 소유자 및 권한 설정
---
- name: Check permissions and ownership of /etc/crontab, /etc/cron.allow, and /etc/cron.deny
  hosts: aws_web
  become: yes
  vars: 
    diag_file_path: '/home/ec2-user/Diag_File.csv'  # 진단 결과 파일 경로
    LAMP_type: 'Server(Linux)'  # LAMP

  tasks:
    # /etc/crontab 파일의 정보를 crontab_stat에 저장
    - name: Get file ownership and permissions information for /etc/crontab
      stat:
        path: /etc/crontab
      register: crontab_stat

    # /etc/cron.allow 파일의 정보를 cron_allow_stat에 저장하되, 파일이 존재하지 않을 경우 무시
    - name: Get file ownership and permissions information for /etc/cron.allow
      stat:
        path: /etc/cron.allow
      register: cron_allow_stat
      ignore_errors: yes

    # /etc/cron.deny 파일의 정보를 cron_deny_stat에 저장
    - name: Get file ownership and permissions information for /etc/cron.deny
      stat:
        path: /etc/cron.deny
      register: cron_deny_stat

    # crontab의 권한 확인
    - name: Determine crontab status
      set_fact:
        crontab_status: >
          {% if crontab_stat.stat.mode | string | regex_search('^0o640$') %}
            The permissions of /etc/crontab are secure (640 or lower).
          {% elif crontab_stat.stat.pw_name != 'root' %}
            The owner of /etc/crontab is not root, which is a vulnerability.
          {% elif crontab_stat.stat.mode > '0640' %}
            The permissions of /etc/crontab are above 640, which is a vulnerability.
          {% else %}
            The /etc/crontab is secure.
          {% endif %}

    - name: Determine cron.allow and cron.deny status
      set_fact:
        cron_status: >
          {% if cron_allow_stat is defined and cron_allow_stat.stat.exists %}
            {% if cron_allow_stat.stat.mode | string | regex_search('^0o640$') and cron_allow_stat.stat.pw_name == 'root' %}
              /etc/cron.allow is secure (640 or lower and owned by root).
            {% else %}
              /etc/cron.allow is a vulnerability.
            {% endif %}
          {% elif cron_deny_stat is defined and cron_deny_stat.stat.exists %}
            {% if cron_deny_stat.stat.mode | string | regex_search('^0o640$') and cron_deny_stat.stat.pw_name == 'root' %}
              /etc/cron.deny is secure (640 or lower and owned by root).
            {% else %}
              /etc/cron.deny is a vulnerability.
            {% endif %}
          {% else %}
            Neither /etc/cron.allow nor /etc/cron.deny exists.
          {% endif %}


    - name: Combined cron status
      set_fact:
        cron_combined_status: >
          {% set messages = [] %}
          {% set messages = messages + [crontab_status] %}
          {% set messages = messages + [cron_status] %}

          {% set cleaned_messages = messages | map('trim') | list %}
          {% set vulnerabilities = cleaned_messages | select('search', 'vulnerability') | list %}
          {{ cleaned_messages | join(' ') }}  # 메시지를 문자열로 결합

    - name: Check if there are vulnerabilities
      set_fact:
        vulnerabilities: "{{ cleaned_messages | select('search', 'vulnerability') | list }}"

    - name: check V
      set_fact:
        diag_result: "V"
      when: vulnerabilities | length > 0 


    - name: check S
      set_fact:
        diag_result: "S"
      when: vulnerabilities | length == 0

    - name: Write diagnostic result to file
      lineinfile:
        path: "{{ diag_file_path }}"
        line: "{{ LAMP_type }}, cron 파일 소유자 및 권한 설정, {{ diag_result }}, chown root 혹은 chmod 640으로 파일 소유자 및 권한 변경"
        create: yes