#Server(Linux): 패스워드 복잡도 설정
---
  - name: 패스워드 복잡도 설정 및 enforce_for_root 설정 확인
    hosts: aws_web
    become: yes
    vars:
      pwquality_conf_file: /etc/security/pwquality.conf  # pwquality.conf 파일 경로 변수화
      system_auth_file: /etc/pam.d/system-auth  # system-auth 파일 경로 변수화
      diag_file_path: '/home/ec2-user/Diag_File.txt'  # 진단 결과 파일 경로
      LAMP_type: 'Server(Linux)'  # LAMP
    
    tasks:
  
      # 1. pwquality.conf 파일에서 minlen과 minclass 확인
      - name: Check minlen and minclass in pwquality.conf
        shell: grep -E "minlen|minclass" {{ pwquality_conf_file }}
        register: pw_quality_conf_check
        failed_when: false
        changed_when: false
  
      # 2. system-auth 파일에서 enforce_for_root 설정 확인
      - name: Check enforce_for_root in system-auth
        shell: grep enforce_for_root {{ system_auth_file }}
        register: enforce_root_check
        failed_when: false
        changed_when: false
  
      # 4. pwquality.conf에서 추출한 minlen과 minclass 값을 변수로 저장 (정수로 변환)
      - name: Extract minlen and minclass from pwquality.conf
        set_fact:
          minlen_value: "{{ (pw_quality_conf_check.stdout | regex_search('minlen\\s*=\\s*(\\d+)', '\\1') | first | int) }}"
          minclass_value: "{{ (pw_quality_conf_check.stdout | regex_search('minclass\\s*=\\s*(\\d+)', '\\1') | first | int) }}"

      # 6. enforce_for_root 설정 및 패스워드 복잡도 설정 결과 확인 및 출력
      - name: Secure
        set_fact:
          diag_result: "S"
        when: minlen_value | int >= 8 and minclass_value | int >= 3 and 'enforce_for_root' in enforce_root_check.stdout

      - name: vulnerable
        set_fact:
          diag_result: "V"
        when: not ((minlen_value | int >= 8 and minclass_value | int >= 3) and ('enforce_for_root' in enforce_root_check.stdout))

      - name: Write diagnostic result to file
        lineinfile:
          path: "{{ diag_file_path }}"
          line: "{{ LAMP_type }}, 패스워드 복잡도 설정, {{ diag_result }}, 패스워드 복잡도 설정 및 enforce_for_root 적용"
          create: yes