---
- name: Apache Security Checks
  hosts: aws_web
  become: yes
  vars:
    document_root_path: '/var/www/html'
    apache_config_path_1: '/etc/httpd'
    apache_config_path_2: '/etc/httpd/conf/httpd.conf'
    LAMP_type: 'Apache'
    diag_file_path: '/home/ec2-user/Diag_File.txt'
    diag_file_value:
      - [1,'웹 서비스 영역의 분리','기본 디렉터리 변경']
      - [2,'불필요한 파일 제거','매뉴얼 디렉터리 삭제']
      - [3,'링크 사용 금지','심볼릭과 Alias 링크 사용 제한']
      - [4,'파일 업로드 및 다운로드 제한','파일 업로드 및 다운로드 용량 제한 설정']
      - [5,'디렉터리 리스팅 제거','디렉터리 검색 기능 제거']
      - [6,'웹 프로세스 권한 제한','apache 데몬 user/group 변경']
      - [7,'최신 보안 패치 적용','보안 패치 적용']

  tasks:

    # Apache: 웹 서비스 영역의 분리
    - name: Ensure Apache is installed
      yum:
        name: httpd
        state: present

    - name: Check current DocumentRoot
      command: "grep DocumentRoot {{ apache_config_path_2 }}"
      register: document_root_check
      ignore_errors: yes

    - name: Check Status
      set_fact:
        status_1: "{{ 'V' if document_root_check.stdout is search(document_root_path) or document_root_check.stdout is search('htdocs') else 'S' }}"


    # Apache: 불필요한 파일 제거
    - name: Check if the manual directory exists
      command: "find {{ apache_config_path_1 }} -name manual"
      register: manual_dir_check
      ignore_errors: yes

    - name: Check for manual settings in httpd.conf
      command: "grep -i 'manual' {{ apache_config_path_2 }}"
      register: manual_setting_check
      ignore_errors: yes

    - name: Check Status
      set_fact:
        status_2: "{{ 'V' if not (manual_dir_check.stdout | length == 0 and manual_setting_check.stdout | length == 0) else 'S' }}"


    # Apache: 링크 사용 금지
    - name: Check if FollowSymLinks is enabled
      command: "grep FollowSymLinks {{ apache_config_path_2 }}"
      register: follow_symlinks_check
      ignore_errors: yes

    - name: Check for aliases in Apache configuration
      command: "grep '^Alias' {{ apache_config_path_2 }}"
      register: alias_check
      ignore_errors: yes

    - name: Determine FollowSymLinks status
      set_fact:
        symlink_result: "S"
      when: follow_symlinks_check.stdout is not search('Indexes')

    - name: Update symlink_result if vulnerabilities exist
      set_fact:
        symlink_result: "V"
      when: follow_symlinks_check.stdout is search('Indexes')

    - name: Determine alias status
      set_fact:
        alias_result: "S"
      when: alias_check.stdout | length == 0

    - name: Update alias_result if vulnerabilities exist
      set_fact:
        alias_result: "V"
      when: alias_check.stdout | length > 0

    - name: Check Status
      set_fact:
        status_3: "{{ 'V' if symlink_result == 'V' or alias_result == 'V' else 'S' }}"


    # Apache: 파일 업로드 및 다운로드 제한
    - name: Check if LimitRequestBody is set in httpd.conf
      command: "grep LimitRequestBody {{ apache_config_path_2 }}"
      register: limit_request_body
      ignore_errors: true

    - name: Check Status
      set_fact:
        status_4: "{{ 'V' if limit_request_body.rc != 0 else 'S' }}"


    # Apache: 디렉터리 리스팅 제거
    - name: Check if Indexes option is set in Apache configuration
      command: "grep -r 'Indexes' {{ apache_config_path_2 }}"
      register: index_option
      ignore_errors: true

    - name: Check Status
      set_fact:
        status_5: "{{ 'V' if index_option.rc == 0 else 'S' }}"


    # Apache: 웹 프로세스 권한 제한
    - name: Check if Apache is running
      shell: ps -ef | grep apache2
      register: apache_process
      changed_when: false

    - name: Check Status
      set_fact:
        apache_owner: "{{ item.split()[0] }}"
        status_6: "{{ 'V' if item.split()[0] == 'root' else 'S' }}"
      loop: "{{ apache_process.stdout_lines }}"


    # Apache: 최신 보안 패치 적용
    - name: Check current Apache version
      command: httpd -v
      register: current_apache_version
      changed_when: false

    - name: Check latest available Apache version
      command: yum info httpd | Version
      register: latest_apache_info

    - name: Extract the latest Apache version
      set_fact:
        latest_version: "{{ latest_apache_info.stdout | regex_search('([0-9]+\\.[0-9]+\\.[0-9]+)') }}"

    - name: Extract the current Apache version
      set_fact:
        current_version: "{{ current_apache_version.stdout | regex_search('([0-9]+\\.[0-9]+\\.[0-9]+)') }}"

    - name: Convert versions to strings
      set_fact:
        current_version_str: "{{ current_version | string }}"
        latest_version_str: "{{ latest_version | string }}"

    - name: Check Status
      set_fact:
        status_7: "{{ 'V' if current_version_str is version(latest_version_str, '<') else 'S' }}"


    # Gather status
    - name: Gather status
      set_fact:
        Apache_status:
          status1: "{{ status_1 }}"
          status2: "{{ status_2 }}"
          status3: "{{ status_3 }}"
          status4: "{{ status_4 }}"
          status5: "{{ status_5 }}"
          status6: "{{ status_6 }}"
          status7: "{{ status_7 }}"

    - name: Print status
      debug:
        var: Apache_status

    - name: Status to file
      lineinfile:
        path: "{{ diag_file_path }}"
        line: "{{ LAMP_type }}, {{ item[1] }}, {{ Apache_status['status' ~ item[0]] }}, {{ item[2] }}"
        create: yes
      loop: "{{ diag_file_value }}"
