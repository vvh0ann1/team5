---
- name: Server(Linux) Security Checks
  hosts: aws_web
  become: yes
  vars:
    ssh_config_file: /etc/ssh/sshd_config
    pam_files:
      - /etc/pam.d/system-auth
      - /etc/pam.d/password-auth
    pwquality_conf_file: /etc/security/pwquality.conf
    system_auth_file: /etc/pam.d/system-auth
    passwd_file_path: '/etc/passwd'
    shadow_file_path: '/etc/shadow'
    services_file_path: '/etc/services'
    hosts_file_path: '/etc/hosts'
    home_dirs_path: '/home'
    login_defs_path: '/etc/login.defs'
    max_days: 90
    secure_permissions: 644
    LAMP_type: 'Server(Linux)'
    diag_file_path: '/home/ec2-user/Diag_File.txt'
    get_path_1: grep PermitRootLogin {{ ssh_config_file }}
    get_path_2_1: grep -E "minlen|minclass" {{ pwquality_conf_file }}
    get_path_2_2: grep enforce_for_root {{ system_auth_file }}
    get_path_3: grep -E 'pam_faillock.so' {{ item }} | grep deny || grep -E 'pam_faillock.so' {{ item }}
    get_path_4: echo $PATH
    get_path_5: 'find /etc /tmp /bin /sbin \( -nouser -o -nogroup \) -xdev -exec ls -l {} \\; 2>/dev/null'
    get_path_9: 'cat {{ passwd_file_path }} | grep /home | cut -d: -f6'
    get_path_10_1:  '|
        if [ -f /usr/sbin/ypserv ] && [ -f /usr/sbin/ypbind ] && [ -f /usr/sbin/ypxfrd ] && [ -f /usr/sbin/rpc.yppasswdd ] && [ -f /usr/sbin/rpc.yupdated ]; then
          echo "installed"
        fi'
    get_path_10_2: ps -ef | grep -E "ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.yupdated" | grep -v grep
    get_path_11_1: cat /etc/mail/sendmail.cf | grep DZ | awk '{print $1}' | sed 's/DZ//g'
    get_path_11_2: postconf -d | grep '^mail_version' | awk '{print $3}'
    get_path_11_3: yum info postfix | grep Version | awk '{print $3}'
    get_path_11_4: yum info sendmail | grep Version | awk '{print $3}'
    get_path_12_1: ps -ef | grep named | grep -v grep
    get_path_12_2: named -V
    get_path_12_3: yum info bind | grep Version
    get_path_15: grep '^PASS_MAX_DAYS' {{ login_defs_path }}

    diag_file_value:
      - [1,'root 계정 원격 접속 제한','root 계정 telnet과 ssh 접속 제한 설정']
      - [2,'패스워드 복잡도 설정','패스워드 복잡도 설정 및 enforce_for_root 적용']
      - [3,'계정 잠금 임계값 설정','계정 임계값 5회 이하로 설정']
      - [4,'root 홈, 디렉터리 소유자 설정','root 계정의 설정 파일에서 PATH=$PATH:$HOME/bin으로 수정']
      - [5,'파일 및 디렉터리 소유자 설정','소유자가 존재하지 않는 파일이나 디렉터리가 불필요한 경우 rm 명령으로 삭제']
      - [6,'/etc/passwd 파일 소유자 및 권한 설정','/etc/passwd 파일 소유자 및 권한 변경']
      - [7,'/etc/shadow 파일 소유자 및 권한 설정','/etc/shadow 파일 소유자 및 권한 변경']
      - [8,'/etc/services 파일 소유자 및 권한 설정','/etc/services 파일의 퍼미션을 644로, 소유자를 root로 변경']
      - [9,'사용자, 시스템 시작파일, 환경파일 소유자 및 권한 설정','소유자 변경 및 일반 사용자 쓰기 권한 제거']
      - [10,'NIS, NIS+ 점검','NFS 서비스 데몬 중지']
      - [11,'Sendmail 버전 점검','Sendmail, postfix 서비스 실행 여부 및 버전 점검 후, OS 벤더사의 보안 패치 설치']
      - [12,'DNS 보안 버전 패치','최신 보안 패치 적용 혹은 DNS 데몬 중지']
      - [13,'/etc/hosts 파일 소유자 및 권한 설정','/etc/hosts 파일 접근 권한 644, 소유자 root로 변경']
      - [14,'cron 파일 소유자 및 권한 설정','chown root 혹은 chmod 640으로 파일 소유자 및 권한 변경']
      - [15,'패스워드 최대 사용 기간 설정','패스워드 최대 사용 기간 90일 이하로 설정']


  tasks:

    # Server(Linux): root 계정 원격 접속 제한
    - name: Check SSH root login setting
      shell: "{{ get_path_1 }}"
      register: ssh_check
      changed_when: false

    - name: Check Status
      set_fact:
        status_1: "{{ 'V' if 'PermitRootLogin no' not in ssh_check.stdout else 'S' }}"


    # Server(Linux): 패스워드 복잡도 설정
    - name: Check minlen and minclass in pwquality.conf
      shell: "{{ get_path_2_1 }}"
      register: pw_quality_conf_check
      failed_when: false
      changed_when: false

    - name: Check enforce_for_root in system-auth
      shell: "{{ get_path_2_2 }}"
      register: enforce_root_check
      failed_when: false
      changed_when: false
  
    - name: Extract minlen and minclass from pwquality.conf
      set_fact:
        minlen_value: "{{ (pw_quality_conf_check.stdout | regex_search('minlen\\s*=\\s*(\\d+)', '\\1') | first | int) }}"
        minclass_value: "{{ (pw_quality_conf_check.stdout | regex_search('minclass\\s*=\\s*(\\d+)', '\\1') | first | int) }}"

    - name: Check Status
      set_fact:
        status_2: "{{ 'V' if not ((minlen_value | int >= 8 and minclass_value | int >= 3) and ('enforce_for_root' in enforce_root_check.stdout)) else 'S' }}"


# Server(Linux): 계정 잠금 임계값 설정
    - name: Check pam_faillock.so existence and deny value in system-auth and password-auth
      shell: "{{ get_path_3 }}"
      with_items: "{{ pam_files }}"
      register: pam_check
      failed_when: false
      changed_when: false
    
    - name: Extract and flatten deny values from pam_check
      set_fact:
        deny_values: "{{ pam_check.results | selectattr('stdout', 'search', 'deny=(\\d+)') | map('regex_search', 'deny=(\\d+)', '\\1') | flatten }}"
    
    - name: Convert deny values to integers
      set_fact:
        deny_values_int: "{{ deny_values | map('int') | list }}"

    - name: Check Status
      set_fact:
        status_3: "{{ 'V' if not (pam_check.results | selectattr('stdout', 'search', 'pam_faillock.so') | list | length == 2 and deny_values_int | length == 2 and deny_values_int[0] <= 5 and deny_values_int[1] <= 5) else 'S' }}"


# Server(Linux): root 홈, 디렉터리 소유자 설정
    - name: Get PATH
      shell: "{{ get_path_4 }}"
      register: path
      changed_when: false

    - name: Split path
      set_fact:
        path_list: "{{ path.stdout.split(':') }}"

    - name: Filter path_list
      set_fact:
        filter_path_list: "{{ path_list[:-1] }}"
  
    - name: Check .
      set_fact:
        has_dot: "{{ '.' in filter_path_list }}"

    - name: Check Status
      set_fact:
        status_4: "{{ 'V' if has_dot else 'S' }}"


# Server(Linux): 파일 및 디렉터리 소유자 설정
    - name: Find files and directories without valid owner or group
      shell: "{{ get_path_5 }}"
      register: invalid_files
      changed_when: false

    - name: Check Status
      set_fact:
        status_5: "{{ 'V' if invalid_files.stdout != '' else 'S' }}"


# Server(Linux): /etc/passwd 파일 소유자 및 권한 설정
    - name: Check ownership and permissions of /etc/passwd
      stat:
        path: "{{ passwd_file_path }}"
      register: passwd_file_info

    - name: Check Status
      set_fact:
        status_6: "{{ 'V' if passwd_file_info.stat.pw_name != 'root' or passwd_file_info.stat.mode | int > 644 else 'S' }}"


# Server(Linux): /etc/shadow 파일 소유자 및 권한 설정
    - name: Check ownership and permissions of /etc/shadow
      stat:
        path: "{{ shadow_file_path }}"
      register: shadow_file_info

    - name: Check Status
      set_fact:
        status_7: "{{ 'V' if shadow_file_info.stat.pw_name != 'root' or shadow_file_info.stat.mode | int > 400 else 'S' }}"


# Server(Linux): /etc/services 파일 소유자 및 권한 설정
    - name: Check ownership and permissions of /etc/services
      stat:
        path: "{{ services_file_path }}"
      register: services_file_info

    - name: Check Status
      set_fact:
        status_8: "{{ 'V' if services_file_info.stat.pw_name != 'root' or services_file_info.stat.mode | int > 644 else 'S' }}"


# Server(Linux): 사용자, 시스템 시작파일, 환경파일 소유자 및 권한 설정
    - name: Get a list of user home directories
      shell: "{{ get_path_9 }}"
      register: home_dirs

    - name: Check ownership and permissions for each home directory
      stat:
        path: "{{ item }}"
      register: dir_info
      loop: "{{ home_dirs.stdout_lines }}"

    - name: Check Status
      set_fact:
        status_9: "{{ 'V' if item.stat.pw_name is not defined or item.stat.pw_name != 'root' or item.stat.mode | int > secure_permissions else 'S' }}"
      loop: "{{ dir_info.results }}"


# Server(Linux): NIS, NIS+ 점검
    - name: Check if NIS related files exist
      shell: "{{ get_path_10_1 }}"
      register: nis_installed
      failed_when: false
      changed_when: false

    - name: Check if NIS service is running
      shell: "{{ get_path_10_2 }}"
      register: nis_running
      failed_when: false
      changed_when: false

    - name: Check Status
      set_fact:
        status_10: "{{ 'V' if nis_installed.stdout != '' and nis_running.stdout != '' else 'S' }}"


# Server(Linux): Sendmail 버전 점검
    - name: Check Sendmail version
      shell: "{{ get_path_11_1 }}"
      register: sendmail_version
      failed_when: false
      changed_when: false

    - name: Check Postfix version
      shell: "{{ get_path_11_2 }}"
      register: postfix_version
      failed_when: false
      changed_when: false

    - name: Get latest Postfix version from official repository
      shell: "{{ get_path_11_3 }}"
      register: postfix_latest_version
      failed_when: false
      changed_when: false

    - name: Get latest Sendmail version from official repository
      shell: "{{ get_path_11_4 }}"
      register: sendmail_latest_version
      failed_when: false
      changed_when: false

    - name: Check Status
      set_fact:
        status_11: "{{ 'V' if sendmail_version.stdout != sendmail_latest_version.stdout or postfix_version.stdout != postfix_latest_version.stdout else 'S' }}"


# Server(Linux): DNS 보안 버전 패치
    - name: Check if DNS service is running
      shell: "{{ get_path_12_1 }}"
      register: named_process
      failed_when: false
      changed_when: false

    - name: Check BIND version if DNS service is running
      shell: "{{ get_path_12_2 }}"
      when: named_process.stdout != ''
      register: bind_version
      failed_when: false
      changed_when: false

    - name: Get latest BIND version from yum
      shell: "{{ get_path_12_3 }}"
      register: yum_bind_version
      failed_when: false
      changed_when: false

    - name: Compare BIND version with latest from yum
      set_fact:
        bind_up_to_date: "{{ (bind_version.stdout | regex_search('BIND ([\\d\\.]+)', '\\1')) == (yum_bind_version.stdout | regex_search('Version\\s+:\\s+(\\S+)', '\\1')) if named_process.stdout != '' else true }}"

    - name: Check Status
      set_fact:
        status_12: "{{ 'V' if named_process.stdout != '' and not bind_up_to_date else 'S' }}"


# Server(Linux): /etc/hosts 파일 소유자 및 권한 설정
    - name: Check ownership and permissions of /etc/hosts
      stat:
        path: "{{ hosts_file_path }}"
      register: hosts_file_info

    - name: Check Status
      set_fact:
        status_13: "{{ 'V' if hosts_file_info.stat.pw_name != 'root' or hosts_file_info.stat.mode | int > 644 else 'S' }}"


# cron 파일 소유자 및 권한 설정
    - name: Get file ownership and permissions information for /etc/crontab
      stat:
        path: /etc/crontab
      register: crontab_stat

    - name: Get file ownership and permissions information for /etc/cron.allow
      stat:
        path: /etc/cron.allow
      register: cron_allow_stat
      ignore_errors: yes

    - name: Get file ownership and permissions information for /etc/cron.deny
      stat:
        path: /etc/cron.deny
      register: cron_deny_stat

    - name: Determine crontab status
      set_fact:
        crontab_status: >
          {% if crontab_stat.stat.mode | string | regex_search('^0o640$') %}
            The permissions of /etc/crontab are secure (640 or lower).
          {% elif crontab_stat.stat.pw_name != 'root' %}
            The owner of /etc/crontab is not root, which is a vulnerability.
          {% elif crontab_stat.stat.mode > '0640' %}
            The permissions of /etc/crontab are above 640, which is a vulnerability.
          {% else %}
            The /etc/crontab is secure.
          {% endif %}

    - name: Determine cron.allow and cron.deny status
      set_fact:
        cron_status: >
          {% if cron_allow_stat is defined and cron_allow_stat.stat.exists %}
            {% if cron_allow_stat.stat.mode | string | regex_search('^0o640$') and cron_allow_stat.stat.pw_name == 'root' %}
              /etc/cron.allow is secure (640 or lower and owned by root).
            {% else %}
              /etc/cron.allow is a vulnerability.
            {% endif %}
          {% elif cron_deny_stat is defined and cron_deny_stat.stat.exists %}
            {% if cron_deny_stat.stat.mode | string | regex_search('^0o640$') and cron_deny_stat.stat.pw_name == 'root' %}
              /etc/cron.deny is secure (640 or lower and owned by root).
            {% else %}
              /etc/cron.deny is a vulnerability.
            {% endif %}
          {% else %}
            Neither /etc/cron.allow nor /etc/cron.deny exists.
          {% endif %}

    - name: Combined cron status
      set_fact:
        cron_combined_status: >
          {% set messages = [] %}
          {% set messages = messages + [crontab_status] %}
          {% set messages = messages + [cron_status] %}

          {% set cleaned_messages = messages | map('trim') | list %}
          {% set vulnerabilities = cleaned_messages | select('search', 'vulnerability') | list %}
          {{ cleaned_messages | join(' ') }} 

    - name: Check if there are vulnerabilities
      set_fact:
        vulnerabilities: "{{ cron_combined_status | select('search', 'vulnerability') | list }}"

    - name: Check Status
      set_fact:
        status_14: "{{ 'V' if vulnerabilities | length > 0 else 'S' }}"


# Server(Linux): 패스워드 최대 사용 기간 설정
    - name: Check PASS_MAX_DAYS in /etc/login.defs
      shell: "{{ get_path_15 }}"
      register: max_days_info
      changed_when: false

    - name: Set fact for PASS_MAX_DAYS value
      set_fact:
        pass_max_days: "{{ max_days_info.stdout.split()[1] | int }}"

    - name: Check Status
      set_fact:
        status_15: "{{ 'V' if pass_max_days | int > max_days else 'S' }}"


    # Gather status
    - name: Gather status
      set_fact:
       ServerLinux_status:
        status1: "{{ status_1 }}"
        status2: "{{ status_2 }}"
        status3: "{{ status_3 }}"
        status4: "{{ status_4 }}"
        status5: "{{ status_5 }}"
        status6: "{{ status_6 }}"
        status7: "{{ status_7 }}"
        status8: "{{ status_8 }}"
        status9: "{{ status_9 }}"
        status10: "{{ status_10 }}"
        status11: "{{ status_11 }}"
        status12: "{{ status_12 }}"
        status13: "{{ status_13 }}"
        status14: "{{ status_14 }}"
        status15: "{{ status_15 }}"

    - name: Print status
      debug:
        var: ServerLinux_status

    - name: Status to file
      lineinfile:
        path: "{{ diag_file_path }}"
        line: "{{ LAMP_type }}, {{ item[1] }}, {{ ServerLinux_status['status' ~ item[0]] }}, {{ item[2] }}"
        create: yes
      loop: "{{ diag_file_value }}"
        
