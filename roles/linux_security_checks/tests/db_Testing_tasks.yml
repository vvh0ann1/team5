# Server(Linux) 1: root 계정 원격 접속 제한
- name: Check SSH root login setting
  become: yes
  shell: "{{ get_path_1_LR }}"
  register: ssh_check
  changed_when: false

- name: Testing 1
  assert:
    that:
      - ssh_check.stdout != ''
    fail_msg: "Failed to Check SSH root login setting"

# Server(Linux) 2: 패스워드 복잡도 설정
- name: Check if pwquality.conf exists
  shell: "{{ get_path_2_1_LR }}"
  register: pwquality_conf_stat
  failed_when: false
  changed_when: false

- name: Testing 2-1
  assert:
    that:
      - pwquality_conf_stat.stdout != ''
    fail_msg: "Failed to Check if pwquality.conf exists"

- name: Check if system-auth exists
  shell: "{{ get_path_2_2_LR }}"
  register: system_auth_stat
  failed_when: false
  changed_when: false

- name: Testing 2-2
  assert:
    that:
      - system_auth_stat.rc in [0, 1]
    fail_msg: "Failed to Check if system-auth exists"

# 3
- name: Check pam_faillock.so existence and deny value in system-auth and password-authCheck pam_faillock.so existence and deny value in system-auth and password-auth
  shell: "{{ get_path_3_LR }}"
  with_items: "{{ linuxserver_conf_path_3 }}"
  register: pam_check
  failed_when: false
  changed_when: false

- name: Testing 3
  assert:
    that:
      - pam_check.rc in [0,1]
    fail_msg: "Failed to Check pam_faillock.so existence and deny value in system-auth and password-auth"

# Server(Linux) 4: root 홈, 디렉터리 소유자 설정
- name: Get current PATH
  shell: "{{ get_path_4_LR }}"
  register: path_output
  changed_when: false

- name: Testing 4
  assert:
    that:
      - path_output.stdout != ''
    fail_msg: "Failed to Get current PATH"

# Server(Linux) 5: 파일 및 디렉터리 소유자 설정
- name: Find files and directories without valid owner or group
  shell: "{{ get_path_5_LR }}"
  register: invalid_files
  changed_when: false


- name: Testing 5
  assert:
    that:
      - invalid_files.stdout != ''
    fail_msg: "Failed to Find files and directories without valid owner or group"

# Server(Linux) 9: 사용자, 시스템 시작파일, 환경파일 소유자 및 권한 설정
- name: Get a list of user home directories
  shell: "{{ get_path_9_LR }}"
  register: home_dirs

- name: Testing 9
  assert:
    that:
      - home_dirs.stdout != ''
    fail_msg: "Failed to Get a list of user home directories"

# Server(Linux) 10: NIS, NIS+ 점검
- name: Check if NIS related files exist
  shell: "{{ get_path_10_1_LR }}"
  register: nis_installed
  failed_when: false
  changed_when: false

- name: Testing 10-1
  assert:
    that:
      - nis_installed.stdout != ''
    fail_msg: "Failed to Check if NIS related files exist"

- name: Check if NIS service is running
  shell: "{{ get_path_10_2_LR }}"
  register: nis_running
  failed_when: false
  changed_when: false

- name: Testing 10-2
  assert:
    that:
      - nis_running.stdout != ''
    fail_msg: "Failed to Check if NIS service is running"

# Server(Linux) 11: Sendmail 버전 점검
- name: Check Sendmail version
  shell: "{{ get_path_11_1_LR }}"
  register: sendmail_version
  failed_when: false
  changed_when: false

- name: Testing 11-1
  assert:
    that:
      - sendmail_version.stdout != ''
    fail_msg: "Failed to  Check Sendmail versio"

- name: Check Postfix version
  shell: "{{ get_path_11_2_LR }}"
  register: postfix_version
  failed_when: false
  changed_when: false

- name: Testing 11-2
  assert:
    that:
      - postfix_version.stdout != ''
    fail_msg: "Failed to Check Postfix version"

- name: Get latest Postfix version from official repository
  shell: "{{ get_path_11_3_LR }}"
  register: postfix_latest_version
  failed_when: false
  changed_when: false

- name: Testing 11-3
  assert:
    that:
      - postfix_latest_version.stdout != ''
    fail_msg: "Failed to Get latest Postfix version from official repository"

- name: Get latest Sendmail version from official repository
  shell: "{{ get_path_11_4_LR }}"
  register: sendmail_latest_version
  failed_when: false
  changed_when: false

- name: Testing 11-4
  assert:
    that:
      - sendmail_latest_version.stdout != ''
    fail_msg: "Failed to Get latest Sendmail version from official repository"

# Server(Linux) 12: DNS 보안 버전 패치
- name: Check if DNS service is running
  shell: "{{ get_path_12_1_LR }}"
  register: named_process
  failed_when: false
  changed_when: false

- name: Testing 12-1
  assert:
    that:
      - named_process.stdout != ''
    fail_msg: "Failed to Check if DNS service is running"

- name: Check BIND version if DNS service is running
  shell: "{{ get_path_12_2_LR }}"
  when: named_process.stdout != ''
  register: bind_version
  failed_when: false
  changed_when: false

- name: Testing 12-2
  assert:
    that:
      - bind_version.stdout != ''
    fail_msg: "Failed to Check BIND version if DNS service is running"

- name: Get latest BIND version from yum
  shell: "{{ get_path_12_3_LR }}"
  register: yum_bind_version
  failed_when: false
  changed_when: false

- name: Testing 12-3
  assert:
    that:
      - yum_bind_version.stdout != ''
    fail_msg: "Failed to Get latest BIND version from yum"


# Server(Linux) 15: 패스워드 최대 사용 기간 설정
- name: Check PASS_MAX_DAYS in /etc/login.defs
  shell: "{{ get_path_15_LR }}"
  register: max_days_info
  changed_when: false

- name: Testing 15
  assert:
    that:
      - max_days_info.stdout != ''
    fail_msg: "Failed to Check PASS_MAX_DAYS in /etc/login.defs"


#Server(Linux) 19: SUID, SGID, Sticky bit 설정 파일 점검
- name: Get files with SUID or SGID permissions
  become: yes
  shell: "{{ get_path_19_LR }}"
  register: suid_sgid_files
  ignore_errors: yes

- name: Testing 19
  assert:
    that:
      - suid_sgid_files.stdout != ''
    fail_msg: "Failed to Get files with SUID or SGID permissions"

#Sever(Linux) 20: world writable 파일 점검
- name: Get world writable files (excluding /tmp)
  shell: "{{ get_path_20_LR }}"
  register: world_writable_files
  ignore_errors: yes

- name: Testing 20
  assert:
    that:
      - world_writable_files.stdout != ''
    fail_msg: "Failed to Get world writable files (excluding /tmp)"

#Server(Linux) 24: Anonymous FTP 서비스 비활성화
- name: Get ftp account exists in /etc/passwd
  shell: "{{ get_path_24_LR }}"
  register: ftp_account
  ignore_errors: yes 

- name: Testing 24
  assert:
    that:
      - ftp_account.stdout != ''
    fail_msg: "Failed to Get ftp account exists in /etc/passwd"
 
#Server(Linux) 26: DoS 공격에 취약한 서비스 비활성화
- name: Check if xinetd is installed
  shell: "{{ get_path_26_1_LR }}"
  register: xinetd_installed
  ignore_errors: yes
  changed_when: false

- name: Testing 26-1
  assert:
    that:
      - xinetd_installed.stdout != ''
    fail_msg: "Failed to Check if xinetd is installed"


#Server(Linux) 27: NFS 서비스 비활성화
- name: Get if NFS daemon is running
  shell: "{{ get_path_27_LR }}"
  register: nfsd_process
  changed_when: false
  ignore_errors: yes

- name: Testing 27
  assert:
    that:
      - nfsd_process.stdout != ''
    fail_msg: "Failed to Get if NFS daemon is running"

#Server(Linux) 28: automountd 제거
- name: Get if automountd daemon is running
  shell: "{{ get_path_28_LR }}"
  register: automountd_status
  changed_when: false
  ignore_errors: yes

- name: Testing 28
  assert:
    that:
      - automountd_status.stdout != ''
    fail_msg: "Failed to Get if automountd daemon is running"


 
