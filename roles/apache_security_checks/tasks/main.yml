# Apache: 웹 서비스 영역의 분리
- name: Get the current DocumentRoot
  shell: "{{ get_path_1 }}"
  register: document_root_check

- name: Set Status
  set_fact:
    status_1: "{{ 'V' if document_root_check.stdout | regex_search(document_root_path) or document_root_check.stdout | regex_search('htdocs') else 'S' }}"


# Apache: 불필요한 파일 제거
- name: Get the status of the manual directory
  shell: "{{ get_path_2_1 }}"
  register: manual_dir_check

- name: Get the manual settings from httpd.conf
  shell: "{{ get_path_2_2 }}"
  register: manual_setting_check
  ignore_errors: true

- name: Set Status
  set_fact:
    status_2: "{{ 'V' if not (manual_dir_check.stdout | length == 0 and manual_setting_check.stdout | length == 0) else 'S' }}"


# Apache: 링크 사용 금지
- name: Get the value of FollowSymLinks
  shell: "{{ get_path_3_1 }}"
  register: follow_symlinks_check

- name: Get the value of aliases
  shell: "{{ get_path_3_2 }}"
  register: alias_check
  ignore_errors: true

- name: Determine FollowSymLinks status
  set_fact:
    symlink_result: "{{ 'V' if 'Indexes' in follow_symlinks_check.stdout else 'S' }}"

- name: Determine alias status
  set_fact:
    alias_result: "{{ 'V' if alias_check.stdout | length > 0 else 'S' }}"

- name: Set Status
  set_fact:
    status_3: "{{ 'V' if symlink_result == 'V' or alias_result == 'V' else 'S' }}"


# Apache: 파일 업로드 및 다운로드 제한
- name: Get LimitRequestBody setting in httpd.conf
  shell: "{{ get_path_4 }}"
  register: limit_request_body
  ignore_errors: true

- name: Set Status
  set_fact:
    status_4: "{{ 'V' if limit_request_body.rc != 0 else 'S' }}"


# Apache: 디렉터리 리스팅 제거
- name: Get Indexes option setting in Apache configuration
  shell: "{{ get_path_5 }}"
  register: index_option
  ignore_errors: true

- name: Set Status
  set_fact:
    status_5: "{{ 'V' if index_option.rc == 0 else 'S' }}"


# Apache: 웹 프로세스 권한 제한
- name: Get the status of Apache
  shell: "{{ get_path_6 }}"
  register: apache_process
  changed_when: false

- name: Determine Status
  set_fact:
    apache_owner: "{{ item.split()[0] }}"
    temp_status: "{{ 'V' if item.split()[0] == 'root' and item.split()[2] != '1' and 'grep' not in item else 'S' }}"
  loop: "{{ apache_process.stdout_lines }}"
  register: status_results

- name: Set Status
  set_fact:
    status_6: "{{ 'V' if 'V' in temp_status_list else 'S' }}"
  vars:
    temp_status_list: "{{ status_results.results | map(attribute='ansible_facts.temp_status') | list }}"


# Apache: 최신 보안 패치 적용
- name: Get current Apache version
  shell: "{{ get_path_7_1 }}"
  register: current_apache_version
  changed_when: false

- name: Get latest available Apache version
  shell: "{{ get_path_7_2 }}"
  register: latest_apache_info
  changed_when: false

- name: Parsing the latest Apache version
  set_fact:
    latest_version: "{{ latest_apache_info.stdout | regex_search('([0-9]+\\.[0-9]+\\.[0-9]+)') }}"

- name: Parsing the current Apache version
  set_fact:
    current_version: "{{ current_apache_version.stdout | regex_search('([0-9]+\\.[0-9]+\\.[0-9]+)') }}"

- name: Convert versions to strings
  set_fact:
    current_version_str: "{{ current_version | string }}"
    latest_version_str: "{{ latest_version | string }}"

- name: Set Status
  set_fact:
    status_7: "{{ 'V' if current_version_str is version(latest_version_str, '<') else 'S' }}"

- name: Gather status
  set_fact:
    Apache_status:
      status1: "{{ status_1 }}"
      status2: "{{ status_2 }}"
      status3: "{{ status_3 }}"
      status4: "{{ status_4 }}"
      status5: "{{ status_5 }}"
      status6: "{{ status_6 }}"
      status7: "{{ status_7 }}"
