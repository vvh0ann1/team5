#Server(Linux): NIS, NIS+ 점검
---
- name: NIS, NIS+ 설치 및 실행 여부 점검
  hosts: aws_web
  become: yes
  vars:
    diag_file_path: '/home/ec2-user/Diag_File.txt'  # 진단 결과 파일 경로
    LAMP_type: 'Server(Linux)'  # LAMP

  tasks:

    # 1. NIS 관련 파일들이 존재하는지 확인
    - name: Check if NIS related files exist
      shell: |
        if [ -f /usr/sbin/ypserv ] && [ -f /usr/sbin/ypbind ] && [ -f /usr/sbin/ypxfrd ] && [ -f /usr/sbin/rpc.yppasswdd ] && [ -f /usr/sbin/rpc.yupdated ]; then
          echo "installed"
        fi
      register: nis_installed
      failed_when: false
      changed_when: false

    # 2. NIS 서비스 실행 여부 확인
    - name: Check if NIS service is running
      shell: ps -ef | grep -E "ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.yupdated" | grep -v grep
      register: nis_running
      failed_when: false
      changed_when: false

    # 3. NIS 설치 및 실행 여부 출력
    - name: Display NIS installation and running status
      debug:
        msg: >
          NIS 설치 상태: {{
            '설치되어 있음' if nis_installed.stdout != '' else '설치되어 있지 않음'
          }} - NIS 실행 상태: {{
            '실행 중' if nis_running.stdout != '' else '실행 중이지 않음'
          }}

    # 4. NIS 설치되지 않거나 설치되어 있지만 실행 중이지 않을 경우 양호
    - name: Write secure diagnostic result to file
      set_fact:
        diag_result: "S"
      when: nis_installed.stdout == '' or nis_running.stdout == ''

    # 5. NIS가 설치되어 있고 실행 중인 경우 취약
    - name: Write vulnerable diagnostic result to file
      set_fact:
        diag_result: "V"
      when: nis_installed.stdout != '' and nis_running.stdout != ''

    - name: Write diagnostic result to file
      lineinfile:
        path: "{{ diag_file_path }}"
        line: "{{ LAMP_type }}, 'NIS, NIS+ 점검', {{ diag_result }}, NFS 서비스 데몬 중지"
        create: yes